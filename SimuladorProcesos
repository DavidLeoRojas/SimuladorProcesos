import tkinter as tk
import time
from tkinter import ttk
import random
import networkx as nx
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

#*************************************************Clases de Objetos necesarios************************************************************************
class Proceso:
    def __init__(self, pid, rafaga, memoria):
        self.pid = pid
        self.rafaga = rafaga
        self.memoria = memoria
        self.estado = "Nuevo"
        self.tiempo_restante = rafaga

class Contenedor:
    def __init__(self, numero, tamaño):
        self.numero = numero
        self.tamaño = tamaño
        self.proceso = None
        self.tamaño_ocupado = 0
        self.tamaño_restante = tamaño

#*************************************************Clase principal de la aplicación************************************************************************
class SimuladorProcesos:

#**********************************************Establecer graficos y variables de entorno************************************************************
    def __init__(self, root):
        self.root = root
        self.root.title("Simulador de Procesos")
        self.temporizadores = []
        
         # Etiqueta de título
        self.titulo = tk.Label(root, text="Simulación de Procesos", font=("Arial", 14))
        self.titulo.place(relx=0.1, rely=0.01, relwidth=0.8, relheight=0.05)
       
        # Crear la tabla de procesos
        self.tree = ttk.Treeview(root, columns=("PID", "Estado", "Ráfaga", "Memoria"), show='headings')
        for col in ("PID", "Estado", "Ráfaga", "Memoria"):
            self.tree.heading(col, text=col)

        self.tree.place(relx=0.1, rely=0.15, relwidth=0.8, relheight=0.4)
        self.root.update_idletasks() 
        table_width = self.tree.winfo_width()
        column_width = int(table_width / 4) 

        self.tree.column("PID", width=column_width, anchor="center")
        self.tree.column("Estado", width=column_width, anchor="center")
        self.tree.column("Ráfaga", width=column_width, anchor="center")
        self.tree.column("Memoria", width=column_width, anchor="center") 

        self.tree.place(relx=0.03, rely=0.06, relwidth=0.5, relheight=0.25) 
        
        # Botones
        self.btn_iniciar = tk.Button(root, text="Iniciar Simulación", command=self.iniciar_simulacion)
        self.btn_iniciar.place(relx=0.55, rely=0.08, relwidth=0.2, relheight=0.05) 
        
        self.btn_reiniciar = tk.Button(root, text="Reiniciar Simulación", command=self.reiniciar_simulacion)
        self.btn_reiniciar.place(relx=0.77, rely=0.08, relwidth=0.2, relheight=0.05) 

        self.btn_agregar = tk.Button(root, text="Agregar Proceso", command=self.agregar_proceso)
        self.btn_agregar.place(relx=0.55, rely=0.15, relwidth=0.2, relheight=0.05) 
        
        self.btn_interrumpir = tk.Button(root, text="Interrumpir Proceso", command=self.interrumpir_proceso)
        self.btn_interrumpir.place(relx=0.77, rely=0.15, relwidth=0.2, relheight=0.05)

        # Combobox para seleccionar el tipo de algoritmo
        self.combolabel = tk.Label(root, text="Seleccionar Algoritmo de memoria:", font=("Arial", 9, "bold"))
        self.combolabel.place(relx=0.55, rely=0.21, relwidth=0.4, relheight=0.05)

        valores = ["Continuia Fija", "Continua Dinamica", "Paginacion", "Segmentacion"]
        self.combobox = ttk.Combobox(root, values=valores, state="readonly")
        self.combobox.set(valores[1])
        self.combobox.place(relx=0.55, rely=0.26, relwidth=0.4, relheight=0.05)

        # Gráfico
        self.fig, self.ax = plt.subplots(figsize=(6, 5))
        self.canvas = FigureCanvasTkAgg(self.fig, master=root)
        self.canvas.get_tk_widget().place(relx=0.05, rely=0.33, relwidth=0.9, relheight=0.35)  # Gráfico al 80% de ancho
        
         # Etiqueta de título talas memoria y lógica
        self.titulo_memoria = tk.Label(root, text="Tabla de asignacion de memoria", font=("Arial", 10, "bold"))
        self.titulo_memoria.place(relx=0.05, rely=0.7, relwidth=0.55, relheight=0.05)

        self.titulo_logica = tk.Label(root, text="Tabla de direcciones", font=("Arial", 10, "bold"))
        self.titulo_logica.place(relx=0.61, rely=0.7, relwidth=0.35, relheight=0.05)

        # Crear la tabla de contenedores
        self.tree_contenedores = ttk.Treeview(root, columns=("N°", "Tamaño", "Proceso", "Ocupado", "Restante"), show='headings')
        for col in ("N°", "Tamaño", "Proceso", "Ocupado", "Restante"):
            self.tree_contenedores.heading(col, text=col)
        
        self.root.update_idletasks()
        table_width = self.tree_contenedores.winfo_width()
        column_width = int(table_width / 5) 
        
        self.tree_contenedores.column("N°", width=column_width, anchor="center")
        self.tree_contenedores.column("Tamaño", width=column_width, anchor="center")
        self.tree_contenedores.column("Proceso", width=column_width, anchor="center")
        self.tree_contenedores.column("Ocupado", width=column_width, anchor="center")
        self.tree_contenedores.column("Restante", width=column_width, anchor="center")
        self.tree_contenedores.place(relx=0.05, rely=0.75, relwidth=0.55, relheight=0.23)

        # Crear la tabla lógica
        self.tree_logica = ttk.Treeview(root, columns=("Proceso", "Contenedores"), show='headings')
        self.tree_logica.heading("Proceso", text="Proceso")
        self.tree_logica.heading("Contenedores", text="Contenedores")
        
        # Ajustar el ancho de las columnas dinámicamente
        self.root.update_idletasks() 
        table_width = self.tree_logica.winfo_width()
        self.tree_logica.column("Proceso", width=int(table_width * 0.3), anchor="center")
        self.tree_logica.column("Contenedores", width=int(table_width * 0.7), anchor="center")
        self.tree_logica.place(relx=0.61, rely=0.75, relwidth=0.35, relheight=0.23)

        # Inicializar procesos y tabla
        self.procesos = []
        self.inicializar_procesos()
        self.actualizar_tabla_procesos()
        
        # Configurar el grafo
        self.grafo = nx.DiGraph()
        self.configurar_diagrama()
        self.dibujar_diagrama([])

        # Variables de control
        self.contenedorDinamico = []
        self.simulacion_en_curso = False
        self.interrupcion = False

    def configurar_diagrama(self):
        self.grafo.add_edges_from([
            ("Nuevo", "Listo"), ("Listo", "Ejecución"), ("Ejecución", "Espera"),
            ("Ejecución", "Terminado"), ("Espera", "Listo")
        ])
        self.pos = {
            "Nuevo": (0, 2), "Listo": (2, 2), "Ejecución": (4, 2),
            "Espera": (4, 0.5), "Terminado": (6, 2)
        }

    def generar_array_procesos(self):
        estados_procesos = {"Nuevo": [],"Listo": [],"Ejecución": [],"Espera": [],"Terminado": []}

        # Recorrer los procesos y agruparlos por estado
        for proceso in self.procesos:
            estados_procesos[proceso.estado].append(f"P{proceso.pid}")

        # Crear el array de strings con saltos de línea cada 3 procesos
        array_resultado = []
        for estado in ["Nuevo", "Listo", "Ejecución", "Espera", "Terminado"]:
            if estados_procesos[estado]:
                procesos_estado = estados_procesos[estado]
                string_estado = "\n".join(
                    [", ".join(procesos_estado[i:i+3]) for i in range(0, len(procesos_estado), 3)]
                )
                array_resultado.append(string_estado)
            else:
                array_resultado.append(" ")
        return array_resultado

    def dibujar_diagrama(self, textos_secundarios):
        self.ax.clear()
        colores_nodos = {
            "Nuevo": "lightgray",
            "Listo": "lightcoral",
            "Ejecución": "lightgreen",
            "Espera": "lightblue",
            "Terminado": "lightpink"
        }
        colores = [colores_nodos[nodo] for nodo in self.grafo.nodes()]
        nx.draw(
            self.grafo, self.pos, with_labels=False, node_color=colores, 
            edge_color="black", node_size=2000, font_size=10, font_weight="bold", ax=self.ax
        )
        pos_labels = {nodo: (x, y + 0.8) for nodo, (x, y) in self.pos.items()}
        etiquetas = {
            "Nuevo": "Nuevo",
            "Listo": "Listo",
            "Ejecución": "Ejecución",
            "Espera": "Espera",
            "Terminado": "Terminado"
        }
        for nodo, (x, y) in pos_labels.items():
            texto = etiquetas[nodo]
            color_etiqueta = colores_nodos[nodo]
            self.ax.text(
                x, y, texto, fontsize=8, fontweight="bold", ha="center", va="center", color="black",
                bbox=dict(facecolor=color_etiqueta, edgecolor="black", boxstyle="round,pad=0.3")  # Fondo con borde
            )
        for i, (nodo, (x, y)) in enumerate(self.pos.items()):
            texto_secundario = textos_secundarios[i] if i < len(textos_secundarios) else ""
            self.ax.text(
                x, y, texto_secundario, fontsize=6, fontweight="normal", ha="center", va="center",
                color="black"
            )
        self.ax.set_xlim(-1, 7) 
        self.ax.set_ylim(0, 3)   
        self.canvas.draw()

    def actualizar_tabla_contenedores(self):
        for row in self.tree_contenedores.get_children():
            self.tree_contenedores.delete(row)
    
        for contenedor in self.contenedorDinamico:
            proceso_asignado = f"P{contenedor.proceso.pid}" if contenedor.proceso else "Ninguno"
            self.tree_contenedores.insert(
                "", "end",
                values=(contenedor.numero, contenedor.tamaño,proceso_asignado,contenedor.tamaño_ocupado,contenedor.tamaño_restante
                )
            )
        self.actualizar_tabla_logica()

    def manejar_contenedores_dinamicos(self, proceso):
        if self.combobox.get() == "Continua Dinamica":
            # Verificar si el proceso ya está asignado completamente
            for contenedor in self.contenedorDinamico:
                if contenedor.proceso == proceso:
                    return
    
            # Buscar un contenedor disponible con suficiente espacio
            contenedor_asignado = None
            for contenedor in self.contenedorDinamico:
                if contenedor.tamaño >= proceso.memoria and contenedor.proceso is None:
                    contenedor.proceso = proceso
                    contenedor.tamaño_ocupado = proceso.memoria
                    contenedor.tamaño_restante = contenedor.tamaño - proceso.memoria
                    contenedor_asignado = contenedor
                    break
    
            # Si no hay un contenedor disponible, crear uno nuevo con el tamaño exacto necesario
            if not contenedor_asignado:
                nuevo_contenedor = Contenedor(len(self.contenedorDinamico) + 1, proceso.memoria)
                nuevo_contenedor.proceso = proceso
                nuevo_contenedor.tamaño_ocupado = proceso.memoria
                nuevo_contenedor.tamaño_restante = nuevo_contenedor.tamaño - proceso.memoria
                self.contenedorDinamico.append(nuevo_contenedor)
    
            # Actualizar las tablas
            self.actualizar_tabla_contenedores()
    
        elif self.combobox.get() == "Paginacion":
            # Dividir la memoria del proceso en páginas de tamaño 10
            paginas = [10] * (proceso.memoria // 10)
            if proceso.memoria % 10 != 0:
                paginas.append(proceso.memoria % 10)
        
            for pagina in paginas:
                contenedor_asignado = None
                # Buscar un contenedor disponible con tamaño 10
                for contenedor in self.contenedorDinamico:
                    if contenedor.proceso is None and contenedor.tamaño == 10:
                        contenedor.proceso = proceso
                        contenedor.tamaño_ocupado = pagina
                        contenedor.tamaño_restante = contenedor.tamaño - pagina
                        contenedor_asignado = contenedor
                        break
        
                # Si no hay un contenedor disponible, crear uno nuevo de tamaño 10
                if not contenedor_asignado:
                    nuevo_contenedor = Contenedor(len(self.contenedorDinamico) + 1, 10)
                    nuevo_contenedor.proceso = proceso
                    nuevo_contenedor.tamaño_ocupado = pagina
                    nuevo_contenedor.tamaño_restante = nuevo_contenedor.tamaño - pagina
                    self.contenedorDinamico.append(nuevo_contenedor)
        
            # Actualizar las tablas
            self.actualizar_tabla_contenedores()    
            
        elif self.combobox.get() == "Segmentacion":
            # Verificar si el proceso ya está completamente asignado
            segmentos_asignados = sum(
                contenedor.tamaño_ocupado for contenedor in self.contenedorDinamico if contenedor.proceso == proceso
            )
            if segmentos_asignados >= proceso.memoria:
                return 
    
            # Generar un número aleatorio entre 3 y 6 para determinar el número de segmentos
            num_segmentos = random.randint(3, 6)
            segmentos = []
    
            # Dividir la memoria del proceso en segmentos balanceados
            memoria_restante = proceso.memoria
            for i in range(num_segmentos):
                if i == num_segmentos - 1:
                    segmentos.append(memoria_restante)
                else:
                    max_segmento = memoria_restante // (num_segmentos - i) + random.randint(-2, 2)
                    max_segmento = max(1, min(max_segmento, memoria_restante)) 
                    segmentos.append(max_segmento)
                    memoria_restante -= max_segmento
    
            # Asignar los segmentos a contenedores
            for segmento in segmentos:
                # Verificar si el segmento ya está asignado
                segmentos_asignados = sum(
                    contenedor.tamaño_ocupado for contenedor in self.contenedorDinamico if contenedor.proceso == proceso
                )
                if segmentos_asignados >= proceso.memoria:
                    break 
    
                # Buscar un contenedor disponible que pueda acomodar el segmento
                contenedor_asignado = None
                for contenedor in self.contenedorDinamico:
                    if contenedor.proceso is None and contenedor.tamaño >= segmento:
                        contenedor.proceso = proceso
                        contenedor.tamaño_ocupado = segmento
                        contenedor.tamaño_restante = contenedor.tamaño - segmento
                        contenedor_asignado = contenedor
                        break
    
                # Si no hay un contenedor disponible, crear uno nuevo con el tamaño exacto necesario
                if not contenedor_asignado:
                    nuevo_contenedor = Contenedor(len(self.contenedorDinamico) + 1, segmento)
                    nuevo_contenedor.proceso = proceso
                    nuevo_contenedor.tamaño_ocupado = segmento
                    nuevo_contenedor.tamaño_restante = nuevo_contenedor.tamaño - segmento
                    self.contenedorDinamico.append(nuevo_contenedor)
            self.actualizar_tabla_contenedores()
    
        elif self.combobox.get() == "Continuia Fija":
            # Verificar si el proceso ya está asignado completamente
            for contenedor in self.contenedorDinamico:
                if contenedor.proceso == proceso:
                    return 

            # Buscar un contenedor disponible
            contenedor_asignado = None
            for contenedor in self.contenedorDinamico:
                if contenedor.tamaño == 40 and contenedor.proceso is None:
                    contenedor.proceso = proceso
                    contenedor.tamaño_ocupado = proceso.memoria
                    contenedor.tamaño_restante = contenedor.tamaño - proceso.memoria
                    contenedor_asignado = contenedor
                    break

            if not contenedor_asignado:
                nuevo_contenedor = Contenedor(len(self.contenedorDinamico) + 1, 40)
                nuevo_contenedor.proceso = proceso
                nuevo_contenedor.tamaño_ocupado = proceso.memoria
                nuevo_contenedor.tamaño_restante = nuevo_contenedor.tamaño - proceso.memoria
                self.contenedorDinamico.append(nuevo_contenedor)
            self.actualizar_tabla_contenedores()
            
    # Liberar todos los contenedores asociados a un proceso
    def liberar_contenedor(self, proceso):
        for contenedor in self.contenedorDinamico:
            if contenedor.proceso == proceso:
                contenedor.proceso = None
                contenedor.tamaño_ocupado = 0
                contenedor.tamaño_restante = contenedor.tamaño
        self.actualizar_tabla_contenedores()                

    def actualizar_tabla_logica(self):
        for row in self.tree_logica.get_children():
            self.tree_logica.delete(row)

        # Agrupar los contenedores por proceso
        procesos_contenedores = {}
        for contenedor in self.contenedorDinamico:
            if contenedor.proceso:
                proceso_id = f"P{contenedor.proceso.pid}"
                if proceso_id not in procesos_contenedores:
                    procesos_contenedores[proceso_id] = []
                procesos_contenedores[proceso_id].append(f"C{contenedor.numero}")

        # Insertar los datos en la tabla lógica
        for proceso, contenedores in procesos_contenedores.items():
            self.tree_logica.insert("", "end", values=(proceso, ",".join(contenedores)))

    def actualizar_tabla_procesos(self):
        self.tree.tag_configure("Nuevo", foreground="dimgray")
        self.tree.tag_configure("Listo", foreground="darkred")
        self.tree.tag_configure("Ejecución", foreground="darkgreen")
        self.tree.tag_configure("Espera", foreground="darkblue")    
        self.tree.tag_configure("Terminado", foreground="darkmagenta")

        for row in self.tree.get_children():
            self.tree.delete(row)

        for proceso in self.procesos:
            self.tree.insert(
                "", "end", values=(proceso.pid, proceso.estado, proceso.rafaga, proceso.memoria),
                tags=(proceso.estado,) 
            )
#***********************************************Funciones de ejecucion************************************************************
   
    def inicializar_procesos(self):
        self.procesos = [Proceso(i, random.randint(5, 10), random.randint(10, 50)) for i in range(3)]
    
    def ejecutar_proceso(self):
        for proceso in self.procesos:
            proceso.estado = "Nuevo"
        self.dibujar_diagrama(self.generar_array_procesos())
        self.actualizar_tabla_procesos()
        temporizador = self.root.after(500, self.pasar_a_listo)
        self.temporizadores.append(temporizador)

    def pasar_a_listo(self):
        for proceso in self.procesos:
            if proceso.estado == "Nuevo":
                if self.combobox.get() == "Continuia Fija":
                    if proceso.memoria > 40:
                        continue
                    else:
                        proceso.estado = "Listo"
                        self.manejar_contenedores_dinamicos(proceso)
                else:
                    # Para otras opciones, pasar a "Listo" directamente
                    proceso.estado = "Listo"
                    self.manejar_contenedores_dinamicos(proceso)
    
            elif proceso.estado == "Espera" and self.combobox.get() == "Continuia Fija":
                # En "Continua Fija", solo los procesos con memoria <= 40 pueden pasar de "Espera" a "Listo"
                if proceso.memoria <= 40:
                    proceso.estado = "Listo"
                    self.manejar_contenedores_dinamicos(proceso)
    
        self.actualizar_tabla_procesos()
        temporizador = self.root.after(500, self.ejecutar_revisiones)
        self.temporizadores.append(temporizador)

    def ejecutar_revisiones(self):
        if self.simulacion_pausada:
            return
    
        # Si no hay proceso en ejecución, tomar el primer "Listo"
        proceso_ejecucion = next((p for p in self.procesos if p.estado == "Ejecución"), None)
        if not proceso_ejecucion:
            proceso_listo = next((p for p in self.procesos if p.estado == "Listo"), None)
            if proceso_listo:
                proceso_listo.estado = "Ejecución"
    
        # Si hay un proceso en "Espera", verificar si puede pasar a "Listo"
        proceso_espera = next((p for p in self.procesos if p.estado == "Espera"), None)
        if proceso_espera:
            proceso_espera.estado = "Listo"
            self.procesos.remove(proceso_espera)
            self.procesos.append(proceso_espera)
    
        # Si hay un proceso en "Nuevo", verificar si puede pasar a "Listo"
        for proceso_nuevo in [p for p in self.procesos if p.estado == "Nuevo"]:
            if self.combobox.get() == "Continuia Fija" and proceso_nuevo.memoria > 40:
                continue 
            else:
                proceso_nuevo.estado = "Listo"
                self.manejar_contenedores_dinamicos(proceso_nuevo)
    
        # Si hay una interrupción, manejarla
        if self.interrupcion:
            self.manejar_interrupcion()
    
        self.gestionar_procesos()
        self.dibujar_diagrama(self.generar_array_procesos())
        self.actualizar_tabla_procesos()
    
        if not self.simulacion_pausada:
            temporizador = self.root.after(1000, self.ejecutar_revisiones)
            self.temporizadores.append(temporizador)

    def manejar_interrupcion(self):

        proceso_ejecucion = next((p for p in self.procesos if p.estado == "Ejecución"), None)
        if proceso_ejecucion:
            proceso_ejecucion.estado = "Espera"
            
            proceso_listo = next((p for p in self.procesos if p.estado == "Listo"), None)
            if proceso_listo:
                proceso_listo.estado = "Ejecución"
            self.interrupcion = False
            self.dibujar_diagrama(self.generar_array_procesos())
            self.actualizar_tabla_procesos()

    def gestionar_procesos(self):
        #Resta 1 a la rafaga del proceso en ejecución
        proceso_ejecucion = next((p for p in self.procesos if p.estado == "Ejecución"), None)
        if proceso_ejecucion:
            proceso_ejecucion.rafaga -= 1
            self.actualizar_tabla_procesos()
            if proceso_ejecucion.rafaga <= 0:
                proceso_ejecucion.estado = "Terminado"
                self.liberar_contenedor(proceso_ejecucion)
                nuevo_proceso = next((p for p in self.procesos if p.estado == "Listo"), None)
                if nuevo_proceso:
                    nuevo_proceso.estado = "Ejecución"

#*********************************************Funciones de los botones************************************************************
    def iniciar_simulacion(self):
        if not self.simulacion_en_curso:
            # Iniciar la simulación
            self.simulacion_en_curso = True
            self.simulacion_pausada = False
            self.btn_iniciar.config(text="Pausar Simulación")
            self.combobox.config(state="disabled")
            self.ejecutar_proceso()
        elif not self.simulacion_pausada:
            # Pausar la simulación
            self.simulacion_pausada = True
            self.btn_iniciar.config(text="Reanudar Simulación")
            for temporizador in self.temporizadores:
                self.root.after_cancel(temporizador)
            self.temporizadores.clear()
        else:
            # Reanudar la simulación
            self.simulacion_pausada = False
            self.btn_iniciar.config(text="Pausar Simulación")
            self.ejecutar_revisiones()

    def reiniciar_simulacion(self):
        for temporizador in self.temporizadores:
            self.root.after_cancel(temporizador)
        self.temporizadores.clear()
        self.procesos = []
        self.contenedorDinamico = []
        self.simulacion_en_curso = False
        self.simulacion_pausada = False
        self.interrupcion = False
        self.btn_iniciar.config(text="Iniciar Simulación")
        self.combobox.config(state="readonly")
        self.inicializar_procesos()
        self.actualizar_tabla_procesos()
        self.actualizar_tabla_contenedores()
        self.dibujar_diagrama(self.generar_array_procesos())    

    def agregar_proceso(self):
        nuevo_proceso = Proceso(len(self.procesos), random.randint(5, 10), random.randint(10, 50))
        self.procesos.append(nuevo_proceso)
        nuevo_proceso.estado = "Nuevo"
        self.actualizar_tabla_procesos()
    
        # Si la simulación está en ejecución y no está pausada, mover el proceso a "Listo"
        if self.simulacion_en_curso and not self.simulacion_pausada:
            self.root.after(500, lambda: self.mover_a_listo(nuevo_proceso))

    def mover_a_listo(self, proceso):
        if self.simulacion_pausada:
            return
    
        if self.combobox.get() == "Continuia Fija" and proceso.memoria > 40:
            return
        else:
            proceso.estado = "Listo"
            self.manejar_contenedores_dinamicos(proceso)
            self.actualizar_tabla_procesos()
    
    def interrumpir_proceso(self):
        self.interrupcion = True 

#****************************************************Inicio de la aplicación************************************************************************
if __name__ == "__main__":
    root = tk.Tk()
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    min_width = int(screen_width * 0.4)
    min_height = int(screen_height * 0.8)
    
    # Establecer el tamaño mínimo de la ventana
    root.geometry(f"{min_width}x{min_height}")
    root.minsize(min_width, min_height) 

    # Crear la aplicación
    app = SimuladorProcesos(root)
    root.mainloop()